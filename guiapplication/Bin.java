/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package guiapplication;

import java.awt.Image;
import javax.swing.ImageIcon;

import mancala.Mancala;

import java.util.ArrayList;
import java.util.Random;

/**
 *
 * @author yzczr8
 */
public class Bin extends javax.swing.JPanel {
    protected java.awt.Image image;
    protected int width;
    protected int height;
    protected ArrayList marbles;
    protected String binType;
    protected Mancala mancala = GameWindow.mancala;
    protected int numMarbles;
    
    private String path = "src/assets/";
    private int id;
    
    public Bin(String type) {
        initComponents();
        
        init(type);
    }
    
    public Bin(String type, int id) {
        initComponents();
        numMarbles = 0;
        
        this.id = id;
        
        init(type);
    }
    
    private void init(String type) {
        //Initialize the marbles array
        marbles = new ArrayList();
        
        //Determine ImageIcon to render.
        javax.swing.ImageIcon ii;
        
        int imgWidth = 95, imgHeight = 90;
        
        switch(type.toUpperCase()) {
            case "LEFT":
                //ii = new ImageIcon(path + "BoardLeft.png");
                ii = new ImageIcon(getClass().getResource("/assets/BoardLeft.png"));
                binType = "Left";
                imgWidth = 100;
                imgHeight = 180;
                break;
            case "RIGHT":
                //ii = new ImageIcon(path + "BoardRight.png");
            	ii = new ImageIcon(getClass().getResource("/assets/BoardRight.png"));
                imgWidth = 100;
                imgHeight = 180;
                binType = "Right";
                break;
            default:
                //ii = new ImageIcon(path + "BoardMiddle.png");
            	ii = new ImageIcon(getClass().getResource("/assets/BoardMiddle.png"));
                binType = "Middle";
                break;
        }
        
        this.image = ii.getImage().getScaledInstance(imgWidth,imgHeight,Image.SCALE_DEFAULT);
        this.width = imgWidth;
        this.height = imgHeight;
        
        this.setSize(width,height);
    }

    public void addMarble(Marble m) {
    	numMarbles++;
        Random num = new Random();
        m.setX(10 + num.nextInt(this.getWidth()-40));
        m.setY(15 + num.nextInt(this.getHeight()-45));
        
        marbles.add(m);
        
        repaint();
    }
    
    public ArrayList getMarbles() { return marbles; }
    public String getMarbleCount() { return Integer.toString(marbles.size()); }
    public void clearMarbles() { 
    	marbles.clear();
    	numMarbles = 0;
    	this.reRender();
    }
    public Image getImage() { return image; }
    public void reRender(){ repaint(); }
    
    public void paint(java.awt.Graphics g) {
        super.paint(g);
        
        java.awt.Graphics2D g2d = (java.awt.Graphics2D)g;
        
        g2d.drawImage(image, 0, 0, this);
        for(int i = 0; i < marbles.size(); i++) {
            Marble m = (Marble)marbles.get(i);
            g2d.drawImage(m.getImage(), m.getX(), m.getY(), this);
        }
        
        g.dispose();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        //Pass static GameBoard object in GameWindow marble count and index to start moving marbles around.
        
    	/*
    	 * changed by me, rather than getting current player from GameBoard, got it from
    	 * Mancala
    	 */
    	if(this.numMarbles > 0){
	        System.out.println("Bin " + id + "clicked");
	        if(id < 6){
	        	if(mancala.getCurrentPlayer() == 1)
	        		return;
	        	mancala.move(12 - id);
	        }
	        else if (id > 5){
	        	if(mancala.getCurrentPlayer() == 2)
	        		return;
	        	mancala.move(id-6);
	        }
	        this.clearMarbles();
	        GameWindow.mancala.print();
	        for(int i = 0; i < 6; i++){
	        	if(mancala.getPieces(i) != GameWindow.board.middleBins[i+6].numMarbles){
	        		GameWindow.board.middleBins[i+6].addMarble(new Marble());
	        	}
	        }
	        for(int i = 7; i < 13; i++){
	        	if(mancala.getPieces(i) != GameWindow.board.middleBins[12-i].numMarbles){
	        		GameWindow.board.middleBins[12-i].addMarble(new Marble());
	        	}
	        }
	        while(GameWindow.board.leftBin.numMarbles - mancala.getPieces(13) != 0){
	        	GameWindow.board.leftBin.addMarble(new Marble());
	        }
	        while(GameWindow.board.rightBin.numMarbles - mancala.getPieces(6) != 0){
	        	GameWindow.board.rightBin.addMarble(new Marble());
	        }
	        GameWindow.board.setPlayerOneScore("" + mancala.getPieces(6));
	        GameWindow.board.setPlayerTwoScore("" + mancala.getPieces(13));
	        if(!mancala.isEndGame())
	        	GameWindow.board.setCurrentPlayer();
	        
    	}
        
        /*
        if(player == 2 && (id >= 0 && id <= 5)) {
            return;
        }
        else if(player == 1 && (id >= 6 && id <= 11)) {
            return;
        }
        
        if(marbles.size() > 0){
            GameWindow.board.moveMarbles((ArrayList)marbles.clone(), id);
        }
        */
    }//GEN-LAST:event_formMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
