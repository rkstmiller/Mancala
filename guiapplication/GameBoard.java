/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package guiapplication;

import mancala.Mancala;

import java.awt.event.MouseAdapter;
import java.util.ArrayList;

/**
 *
 * @author yzczr8
 */
public class GameBoard extends javax.swing.JPanel implements Runnable {
    protected Bin leftBin;
    protected Bin rightBin;
    protected javax.swing.JPanel gameMiddlePanel;
    public Bin[] middleBins;
    private int currentPlayer;
    protected MouseAdapter mouseAdapter;
    protected Mancala mancala = GameWindow.mancala;
    
    /**
     * Creates new form GameBoard
     * 
     * Game Rules:
     * 1) Each Bin has 4 marbles starting out (48 marbles total)
     * 2) Marbles in the left and right bins are the player's score
     * 3) Randomly pick one player to start and then the player picks the marbles from one bin on their side to play
     * 4) Rotation is counter-clockwise. Place marbles in your side bin, but skip the other player's if you get to it.
     * 5) If the last marble you drop lands in your side bin, you get a free turn
     * 6) If you drop the last piece on your side in an empty bin, you take that piece, and any of the marbles in the bin across from the bin you landed in.
     * 7) The game ends when there are no marbles in the middle and the player who wins has the most marbles.
     * 
     */
    public GameBoard() {
        initComponents();
        
        leftBin = new Bin("left");
        gamePanelLeft.add(leftBin);
        
        gamePanelMiddle.setLayout(new java.awt.GridLayout(2,6));
        middleBins = new Bin[12];
        for(int i = 0; i < 12; i++) {
            middleBins[i] = new Bin("middle", i);
            gamePanelMiddle.add(middleBins[i]);
        }
        
        rightBin = new Bin("right");
        gamePanelRight.add(rightBin);
        
        reset();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblPlayer1Score = new javax.swing.JLabel();
        lblPlayer2Score = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblCurrentPlayer = new javax.swing.JLabel();
        gameBoardPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        gamePanelLeft = new javax.swing.JPanel();
        gamePanelRight = new javax.swing.JPanel();
        gamePanelMiddle = new javax.swing.JPanel();

        setMinimumSize(new java.awt.Dimension(800, 250));
        setPreferredSize(new java.awt.Dimension(800, 250));

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setText("Player One Score:");

        lblPlayer1Score.setText("0");

        lblPlayer2Score.setText("0");

        jLabel4.setText("Player Two Score:");

        jLabel2.setText("Current Player: ");

        lblCurrentPlayer.setText("Player");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPlayer1Score)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCurrentPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(130, 130, 130)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPlayer2Score)
                .addGap(92, 92, 92))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(lblPlayer2Score))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(lblPlayer1Score)
                        .addComponent(jLabel2)
                        .addComponent(lblCurrentPlayer)))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        gameBoardPanel.setMinimumSize(new java.awt.Dimension(580, 167));
        gameBoardPanel.setPreferredSize(new java.awt.Dimension(580, 167));

        gamePanelLeft.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout gamePanelLeftLayout = new javax.swing.GroupLayout(gamePanelLeft);
        gamePanelLeft.setLayout(gamePanelLeftLayout);
        gamePanelLeftLayout.setHorizontalGroup(
            gamePanelLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        gamePanelLeftLayout.setVerticalGroup(
            gamePanelLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 167, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(gamePanelLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gamePanelLeft, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        gamePanelRight.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout gamePanelRightLayout = new javax.swing.GroupLayout(gamePanelRight);
        gamePanelRight.setLayout(gamePanelRightLayout);
        gamePanelRightLayout.setHorizontalGroup(
            gamePanelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        gamePanelRightLayout.setVerticalGroup(
            gamePanelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 167, Short.MAX_VALUE)
        );

        gamePanelMiddle.setLayout(new java.awt.GridLayout(1, 0));

        javax.swing.GroupLayout gameBoardPanelLayout = new javax.swing.GroupLayout(gameBoardPanel);
        gameBoardPanel.setLayout(gameBoardPanelLayout);
        gameBoardPanelLayout.setHorizontalGroup(
            gameBoardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gameBoardPanelLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gamePanelMiddle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gamePanelRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        gameBoardPanelLayout.setVerticalGroup(
            gameBoardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(gamePanelRight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(gamePanelMiddle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        this.setLayout(new java.awt.GridLayout(2,6));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(gameBoardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gameBoardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    public void reset() {
        leftBin.clearMarbles();
        rightBin.clearMarbles();
        
        for(int i = 0; i < middleBins.length; i++) {
            middleBins[i].clearMarbles();
        }
        
        //populate the middle bins
        for(int i = 0; i < 12; i++){
            for(int j = 0; j < 4; j++) {
                middleBins[i].addMarble(new Marble());
            }
        }
        
        setPlayerOneScore("0");
        setPlayerTwoScore("0");
        
        java.util.Random num = new java.util.Random();
        
        currentPlayer = mancala.getCurrentPlayer();
        System.out.println(currentPlayer);
        printCurrentPlayer();
        
        run();
    }
    
    public void paint(java.awt.Graphics g) {
        super.paint(g);
        
        g.dispose();
    }
    
    public void run() {
        repaint();
    }
    
    public void printCurrentPlayer() {
        String playerNumber;
        currentPlayer = mancala.getCurrentPlayer();
        
        if(currentPlayer == 0) {
            playerNumber = "One";
        }
        else {
            playerNumber = "Two";
        }
        
        this.lblCurrentPlayer.setText("Player " + mancala.getCurrentPlayer());
    }
    public int getCurrentPlayer() { return currentPlayer; }
    
    public void moveMarbles(ArrayList marbles, int index) {
        //Move the marbles from the bin that was clicked on in the middleBins array
        //i is the current bin clicked on, i+1 will be the next. 
        //bins are as follows:
        // 0  1  2  3  4  5
        // 6  7  8  9 10 11
        int numMarbles = marbles.size();
        ArrayList marblesClone = new ArrayList();
        
        boolean secondTurn = false;
        boolean captureMarbles = false;
        
        //copy the contents of the marbles arraylist.
        for(int i = 0; i < numMarbles; i++) {
            marblesClone.add((Marble)marbles.get(i));
        }
        
        //Clear the marbles from the bin
        middleBins[index].clearMarbles();
        middleBins[index].reRender();
        
        //move the marbles counter clockwise
        while(numMarbles >= 1) {
            secondTurn = false;
            //Player one bin logic
            if(index == 0 && currentPlayer == 0 && numMarbles == 1) {
                secondTurn = true;
                leftBin.addMarble((Marble)marblesClone.get(numMarbles-1));
                numMarbles--;
                break;
            }
            else if(index == 0 && currentPlayer == 0 && numMarbles >= 2) {
                leftBin.addMarble((Marble)marblesClone.get(numMarbles-1));
                numMarbles--;
                
                index = 6;
                //Check for capturing marbles
                if((index >= 0 && index <= 5) && numMarbles == 1 && Integer.parseInt(middleBins[index].getMarbleCount()) == 0) {
                    captureMarbles = true;
                }
                middleBins[index].addMarble((Marble)marblesClone.get(numMarbles-1));
                numMarbles--;
            }
            
            //Player two bin logic
            if(index == 11 && currentPlayer == 1 && numMarbles == 1) {
                secondTurn = true;
                rightBin.addMarble((Marble)marblesClone.get(numMarbles-1));
                numMarbles--;
                break;
            }
            else if(index == 11 && currentPlayer == 1 && numMarbles >= 2) {
                rightBin.addMarble((Marble)marblesClone.get(numMarbles-1));
                numMarbles--;
                
                index = 5;
                //Check for capturing marbles
                if((index >= 6 && index <= 11) && numMarbles == 1 && Integer.parseInt(middleBins[index].getMarbleCount()) == 0) {
                    captureMarbles = true;
                }
                middleBins[index].addMarble((Marble)marblesClone.get(numMarbles-1));
                numMarbles--;
            }
            
            if(numMarbles == 0) {
                return;
            }
            
            //first row iteration
            if(index < 6 || index == 1) {
                index--;
            }
            //second row iteration
            else {
                index++;
            }
            
            //Check for capturing marbles
            if(numMarbles == 1 && Integer.parseInt(middleBins[index].getMarbleCount()) == 0) {
                captureMarbles = true;
            }
            middleBins[index].addMarble((Marble)marblesClone.get(numMarbles-1));
            numMarbles--;
        }
        
        //If the capture marbles flag was triggered, move the marbles into the appropriate player's bin.
        if(captureMarbles) {
            if(currentPlayer == 0) {
                if(index >= 0 && index <= 5) {
                    ArrayList capturedMarbles = middleBins[index+6].getMarbles();

                    //Add marbles to the first player's bin
                    for(int i = 0; i < capturedMarbles.size(); i++) {
                        leftBin.addMarble((Marble)capturedMarbles.get(i));
                    }
                    middleBins[index+6].clearMarbles();
                    middleBins[index+6].reRender();
                    
                    //Add the last place marble to your bin as well
                    capturedMarbles = middleBins[index].getMarbles();
                    
                    leftBin.addMarble((Marble)capturedMarbles.get(0));
                    middleBins[index].clearMarbles();
                }
            }
            else {
                if(index >= 6 && index <= 11) {
                    ArrayList capturedMarbles = middleBins[index-6].getMarbles();

                    //Add marbles to the second player's bin
                    for(int i = 0; i < capturedMarbles.size(); i++) {
                        rightBin.addMarble((Marble)capturedMarbles.get(i));
                    }
                    middleBins[index-6].clearMarbles();
                    middleBins[index-6].reRender();
                    
                    //Add the last place marble to your bin as well
                    capturedMarbles = middleBins[index].getMarbles();
                    
                    rightBin.addMarble((Marble)capturedMarbles.get(0));
                    middleBins[index].clearMarbles();
                }
            }
        }
        
        //Switch Players
        if(!secondTurn) {
            if(currentPlayer == 0) { currentPlayer = 1; }
            else                   { currentPlayer = 0; }
            
            printCurrentPlayer();
        }
        
        //Scoring is done automatically by the left and right Bin objects.
    }
    
    public void setPlayerOneScore(String score) {
        this.lblPlayer1Score.setText(score);
    }
    
    public void setPlayerTwoScore(String score) {
        this.lblPlayer2Score.setText(score);
    }
    
    public void setCurrentPlayer(){
    	this.lblCurrentPlayer.setText("Player " + mancala.getCurrentPlayer());
    }
    
    public void displayWinner(int winner){
    	this.lblCurrentPlayer.setText("Player " + winner + " wins!");
    	repaint();
    }
    
    private void checkEvent(java.awt.event.MouseEvent e) {
        System.out.println("Bin pressed");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel gameBoardPanel;
    private javax.swing.JPanel gamePanelLeft;
    private javax.swing.JPanel gamePanelMiddle;
    private javax.swing.JPanel gamePanelRight;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblCurrentPlayer;
    private javax.swing.JLabel lblPlayer1Score;
    private javax.swing.JLabel lblPlayer2Score;
    // End of variables declaration//GEN-END:variables
    
}
